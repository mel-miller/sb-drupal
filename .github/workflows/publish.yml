name: Deploy Storybook to GitHub Pages

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

concurrency:
  group: pages-deploy
  cancel-in-progress: false

jobs:
  deploy-storybook:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pages: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Clear npm cache and remove lock file to avoid optional dependency issues
          npm cache clean --force
          rm -f package-lock.json
          npm install

      - name: Build component library
        run: npm run build

      - name: Build Storybook
        run: npm run build-storybook

      # Release deployment (root) - only for tags
      - name: Setup Pages (Release)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/configure-pages@v4

      - name: Upload Storybook to Pages (Release)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-pages-artifact@v3
        with:
          path: './storybook-static'

      - name: Deploy to GitHub Pages (Release)
        if: startsWith(github.ref, 'refs/tags/v')
        id: deployment
        uses: actions/deploy-pages@v4

      # Also deploy release to versioned directory
      - name: Deploy release to versioned directory
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Get the tag name (remove refs/tags/ prefix)
          TAG_NAME=${GITHUB_REF#refs/tags/}

          # Clone the gh-pages branch in a separate directory
          cd ..
          git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages-repo || {
            echo "gh-pages branch doesn't exist, creating new repo"
            mkdir gh-pages-repo
            cd gh-pages-repo
            git init
            git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git checkout -b gh-pages
            echo "# GitHub Pages" > README.md
            git add README.md
            git commit -m "Initialize gh-pages branch"
            git push -u origin gh-pages
            cd ..
            rm -rf gh-pages-repo
            git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages-repo
          }

          cd gh-pages-repo

          # Create versioned directory and copy files
          VERSION_DIR="$TAG_NAME"
          rm -rf "$VERSION_DIR" 2>/dev/null || true
          mkdir -p "$VERSION_DIR"
          cp -r ../sb-drupal/storybook-static/* "$VERSION_DIR/"

          # Add, commit and push
          git add "$VERSION_DIR"
          git commit -m "Deploy release $TAG_NAME to $VERSION_DIR directory"
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Main branch deployment (main directory) + PR cleanup if needed
      - name: Deploy main branch and cleanup merged PR
        if: github.ref == 'refs/heads/main'
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Clone the gh-pages branch in a separate directory
          cd ..
          git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages-repo || {
            echo "gh-pages branch doesn't exist, creating new repo"
            mkdir gh-pages-repo
            cd gh-pages-repo
            git init
            git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git checkout -b gh-pages
            echo "# GitHub Pages" > README.md
            git add README.md
            git commit -m "Initialize gh-pages branch"
            git push -u origin gh-pages
            cd ..
            rm -rf gh-pages-repo
            git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages-repo
          }

          cd gh-pages-repo

          # Create main directory and copy files
          MAIN_DIR="main"
          rm -rf "$MAIN_DIR" 2>/dev/null || true
          mkdir -p "$MAIN_DIR"
          cp -r ../sb-drupal/storybook-static/* "$MAIN_DIR/"

          # Check if this push was from a merged PR and clean up the PR directory
          if [[ "${{ github.event.head_commit.message }}" == *"Merge pull request #"* ]]; then
            # Extract PR number from commit message
            PR_NUM=$(echo "${{ github.event.head_commit.message }}" | grep -o '#[0-9]\+' | head -1 | sed 's/#//')
            PR_DIR="pr-$PR_NUM"
            if [ -d "$PR_DIR" ]; then
              echo "Cleaning up merged PR directory: $PR_DIR"
              rm -rf "$PR_DIR"
            fi
          fi

          # Add, commit and push all changes
          git add .
          git commit -m "Deploy main branch to $MAIN_DIR directory"
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # PR deployment (subdirectory)
      - name: Deploy PR to subdirectory
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Clone the gh-pages branch in a separate directory
          cd ..
          git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages-repo || {
            echo "gh-pages branch doesn't exist, creating new repo"
            mkdir gh-pages-repo
            cd gh-pages-repo
            git init
            git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git checkout -b gh-pages
            echo "# GitHub Pages" > README.md
            git add README.md
            git commit -m "Initialize gh-pages branch"
            git push -u origin gh-pages
            cd ..
            rm -rf gh-pages-repo
            git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages-repo
          }

          cd gh-pages-repo

          # Create PR directory and copy files
          PR_DIR="pr-${{ github.event.number }}"
          rm -rf "$PR_DIR" 2>/dev/null || true
          mkdir -p "$PR_DIR"
          cp -r ../sb-drupal/storybook-static/* "$PR_DIR/"

          # Add, commit and push
          git add "$PR_DIR"
          git commit -m "Deploy PR #${{ github.event.number }} to $PR_DIR"
          git push origin gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Cleanup PR directory when PR is closed
      - name: Cleanup PR directory
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Clone the gh-pages branch in a separate directory
          cd ..
          git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages-repo || {
            echo "gh-pages branch doesn't exist"
            exit 0
          }

          cd gh-pages-repo

          # Remove PR directory
          PR_DIR="pr-${{ github.event.number }}"
          if [ -d "$PR_DIR" ]; then
            rm -rf "$PR_DIR"
            git add .
            git commit -m "Remove PR #${{ github.event.number }} directory ($PR_DIR)"
            git push origin gh-pages
            echo "Removed $PR_DIR directory"
          else
            echo "$PR_DIR directory not found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR with preview link
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;
            const previewUrl = `https://${repoOwner}.github.io/${repoName}/pr-${prNumber}/`;

            const comment = `ðŸš€ **Storybook Preview Deployed!**

            Preview this PR's changes at: ${previewUrl}

            This preview will be updated automatically when you push new commits to this PR.`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: repoOwner,
              repo: repoName,
              body: comment
            });
